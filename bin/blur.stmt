module name=blur, target=x86-64-linux-avx2-disable_llvm_loop_opt
external_plus_metadata func blur (input, result) {
assert((uint64)reinterpret((halide_buffer_t *)result.buffer) != (uint64)0, halide_error_buffer_argument_is_null("result"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let result = (void *)_halide_buffer_get_host((halide_buffer_t *)result.buffer)
let result.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)result.buffer)
let result.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)result.buffer)
let result.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)result.buffer)
let result.min.0 = _halide_buffer_get_min((halide_buffer_t *)result.buffer, 0)
let result.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)result.buffer, 0)
let result.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)result.buffer, 0)
let result.min.1 = _halide_buffer_get_min((halide_buffer_t *)result.buffer, 1)
let result.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)result.buffer, 1)
let result.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)result.buffer, 1)
let input.extent.0.required = let t88 = (input.extent.0 + input.min.0) in (max(min(result.extent.0 + result.min.0, t88), input.min.0 + 1) - max(min(t88 + -1, result.min.0), input.min.0))
let input.min.0.required = max(min((input.extent.0 + input.min.0) + -1, result.min.0), input.min.0)
let input.extent.1.required.s = let t89 = (result.extent.1 + result.min.1) in (let t90 = (input.extent.1 + input.min.1) in (max(max(min(t89, t90 + -1), max(min(t89, t90 + 1), min(t89, t90) + 1) + -2), input.min.1) - max(min(t90, result.min.1) + -1, input.min.1)))
let input.min.1.required = max(min(input.extent.1 + input.min.1, result.min.1) + -1, input.min.1)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct(input.min.0.required, input.extent.0.required, 1, 0, input.min.1.required, input.extent.1.required.s + 1, input.extent.0.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)result.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)result.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)result.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct(result.min.0, result.extent.0, 1, 0, result.min.1, result.extent.1, result.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)result.buffer))) {
 assert(input.type == (uint32)67585, halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(result.type == (uint32)67585, halide_error_bad_type("Output buffer result", result.type, (uint32)67585))
 assert(result.dimensions == 2, halide_error_bad_dimensions("Output buffer result", result.dimensions, 2))
 assert((input.min.0 <= input.min.0.required) && ((input.extent.0.required + input.min.0.required) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, (input.extent.0.required + input.min.0.required) + -1, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && (((input.extent.1.required.s + input.min.1.required) + 1) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, input.extent.1.required.s + input.min.1.required, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(0 <= result.extent.0, halide_error_buffer_extents_negative("Output buffer result", 0, result.extent.0))
 assert(0 <= result.extent.1, halide_error_buffer_extents_negative("Output buffer result", 1, result.extent.1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(result.stride.0 == 1, halide_error_constraint_violated("result.stride.0", result.stride.0, "1", 1))
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 let result.total_extent.1 = int64(result.extent.1)*int64(result.extent.0)
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(uint64(result.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("result", uint64(result.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(result.extent.1)*int64(result.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("result", (uint64)abs(int64(result.extent.1)*int64(result.stride.1)), (uint64)2147483647))
 assert(result.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("result", result.total_extent.1, (int64)2147483647))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(!result.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer result"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 assert(result != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer result"))
 produce result {
  let result.s0.v1.prologue = min(max(input.min.1 + 1, result.min.1), result.extent.1 + result.min.1)
  let result.s0.v1.epilogue = min(max(max(input.min.1 + 1, result.min.1), (input.extent.1 + input.min.1) + -1), result.extent.1 + result.min.1)
  let t50 = result.s0.v1.prologue - result.min.1
  let t54 = 0 - (result.min.1*result.stride.1)
  let t53 = (input.min.1*input.stride.1) + input.min.0
  let t52 = input.extent.1 + input.min.1
  let t51 = input.extent.0 + input.min.0
  for (result.s0.v1.rebased, 0, t50) {
   let t55 = result.min.1 + result.s0.v1.rebased
   for (result.s0.v0.rebased, 0, result.extent.0) {
    let t25 = max(min(t51 + -1, result.min.0 + result.s0.v0.rebased), input.min.0)
    result[((result.stride.1*t55) + t54) + result.s0.v0.rebased] = uint8((((uint16(input[((max(min(t52, t55) + -1, input.min.1)*input.stride.1) - t53) + t25]) + uint16(input[((max(min(t52 + -1, t55), input.min.1)*input.stride.1) - t53) + t25])) + uint16(input[((max(min(t55 + 2, t52) + -1, input.min.1)*input.stride.1) - t53) + t25]))/(uint16)9))
   }
  }
  let t65 = input.extent.0 + input.min.0
  let t66 = result.extent.0 + result.min.0
  let t67 = input.min.1*input.stride.1
  let t68 = result.min.1*result.stride.1
  let t69 = max(input.min.0, result.min.0)
  let t58 = min(max(t65, t69), t66)
  let t57 = min(t66, t69)
  let t56 = result.s0.v1.epilogue - result.s0.v1.prologue
  for (result.s0.v1.rebased, 0, t56) {
   let t70 = t57 - result.min.0
   let t73 = 0 - t68
   let t71 = result.s0.v1.prologue + result.s0.v1.rebased
   let t72 = input.min.0 + t67
   for (result.s0.v0.rebased, 0, t70) {
    let t27 = max(min(t65 + -1, result.min.0 + result.s0.v0.rebased), input.min.0)
    result[((result.stride.1*t71) + t73) + result.s0.v0.rebased] = uint8((((uint16(input[(((t71 + -1)*input.stride.1) - t72) + t27]) + uint16(input[((input.stride.1*t71) - t72) + t27])) + uint16(input[(((t71 + 1)*input.stride.1) - t72) + t27]))/(uint16)9))
   }
   let t77 = (t57 - t68) - result.min.0
   let t75 = (t57 - t67) - input.min.0
   let t74 = t58 - t57
   let t76 = result.s0.v1.prologue + result.s0.v1.rebased
   for (result.s0.v0.rebased, 0, t74) {
    result[((result.stride.1*t76) + t77) + result.s0.v0.rebased] = uint8((((uint16(input[(((t76 + -1)*input.stride.1) + t75) + result.s0.v0.rebased]) + uint16(input[((input.stride.1*t76) + t75) + result.s0.v0.rebased])) + uint16(input[(((t76 + 1)*input.stride.1) + t75) + result.s0.v0.rebased]))/(uint16)9))
   }
   let t81 = (t58 - t68) - result.min.0
   let t78 = t66 - t58
   let t79 = result.s0.v1.prologue + result.s0.v1.rebased
   let t80 = input.min.0 + t67
   for (result.s0.v0.rebased, 0, t78) {
    let t30 = max(min(t65 + -1, result.s0.v0.rebased + t58), input.min.0)
    result[((result.stride.1*t79) + t81) + result.s0.v0.rebased] = uint8((((uint16(input[(((t79 + -1)*input.stride.1) - t80) + t30]) + uint16(input[((input.stride.1*t79) - t80) + t30])) + uint16(input[(((t79 + 1)*input.stride.1) - t80) + t30]))/(uint16)9))
   }
  }
  let t82 = (result.extent.1 + result.min.1) - result.s0.v1.epilogue
  let t86 = 0 - (result.min.1*result.stride.1)
  let t85 = (input.min.1*input.stride.1) + input.min.0
  let t84 = input.extent.1 + input.min.1
  let t83 = input.extent.0 + input.min.0
  for (result.s0.v1.rebased, 0, t82) {
   let t87 = result.s0.v1.epilogue + result.s0.v1.rebased
   for (result.s0.v0.rebased, 0, result.extent.0) {
    let t33 = max(min(t83 + -1, result.min.0 + result.s0.v0.rebased), input.min.0)
    result[((result.stride.1*t87) + t86) + result.s0.v0.rebased] = uint8((((uint16(input[((max(min(t84, t87) + -1, input.min.1)*input.stride.1) - t85) + t33]) + uint16(input[((max(min(t84 + -1, t87), input.min.1)*input.stride.1) - t85) + t33])) + uint16(input[((max(min(t87 + 2, t84) + -1, input.min.1)*input.stride.1) - t85) + t33]))/(uint16)9))
   }
  }
 }
}
}


